df[df.HasShot == True][['Tick','Steam_ID','HasShot']]
df[df.HasShot == True][['Tick','Name','Steam_ID','HasShot']]
df[(df.HasShot == True) & (df.Name !="bu khalifa")][['Tick','Name','Steam_ID','HasShot']]
df[(df.HasShot == True) & (df.Name !="bu khalifa")][['Tick','Name','Steam_ID','HasShot', 'Weapon']]
df[(df.HasShot == True)][['Tick','Name','Steam_ID','HasShot', 'Weapon']]
df[(df.HasShot == True)][['Tick','Name','Steam_ID', 'Weapon']]
DFSHOTS = df[(df.HasShot == True)][['Tick','Name','Steam_ID', 'Weapon']]
dfshots = df[(df.HasShot == True)][['Tick','Name','Steam_ID', 'Weapon']]
dfshots
where
dfhurt
pd.merge(left=dfshots, right=dfhurt, left_on=["Tick", "Steam_ID"] ,right_on=["Tick", "Attacker"])
dfhurt
pd.merge(left=dfshots, right=dfhurt, left_on=["Tick", "Steam_ID"] ,right_on=["Tick", "Attacker"], how='left')
pd.merge(left=dfshots, right=dfhurt, left_on=["Tick", "Steam_ID"] ,right_on=["Tick", "Attacker"], how='right')
where
list
where
dfhurt
where
list
where
dfhurt
dfshots
dfhurt
where
import timeit
s = """for i, (player, enemy) in enumerate(zip(dfplayer.iterrows(), dfenemy.iterrows())):
p_pos = np.array([player[1].X, player[1].Y, player[1].Z])
intersect = player_look_intersect(player[1], enemy[1])
dfplayer.set_value(i, "XAimbot", intersect.localx)
dfplayer.set_value(i, "YAimbot", intersect.localy) 
dfplayer.set_value(i, "Intersect", "|#|".join(map(str, intersect.point)))
!import code; code.interact(local=vars())
for i, (player, enemy) in enumerate(zip(dfplayer.iterrows(), dfenemy.iterrows())):
p_pos = np.array([player[1].X, player[1].Y, player[1].Z])
intersect = player_look_intersect(player[1], enemy[1])
dfplayer.set_value(i, "XAimbot", intersect.localx)
dfplayer.set_value(i, "YAimbot", intersect.localy) 
dfplayer.set_value(i, "Intersect", "|#|".join(map(str, intersect.point)))
timeit
import timeit
dfplayer
df
where
df
!
help(!)
help
import code; code.interact(local=vars())
df
_s = """for i, (player, enemy) in enumerate(zip(dfplayer.iterrows(), dfenemy.iterrows())):
p_pos = np.array([player[1].X, player[1].Y, player[1].Z])
intersect = player_look_intersect(player[1], enemy[1])
dfplayer.set_value(i, "XAimbot", intersect.localx)
dfplayer.set_value(i, "YAimbot", intersect.localy) 
dfplayer.set_value(i, "Intersect", "|#|".join(map(str, intersect.point)))
import code; code.interact(local=vars())
for i, (player, enemy) in enumerate(zip(dfplayer.iterrows(), dfenemy.iterrows())):
p_pos = np.array([player[1].X, player[1].Y, player[1].Z])
intersect = player_look_intersect(player[1], enemy[1])
dfplayer.set_value(i, "XAimbot", intersect.localx)
dfplayer.set_value(i, "YAimbot", intersect.localy) 
player_look_intersect(player[1], enemy[1])
df
c
_t3 = time.time()
_t3 - time.time()
t1 - t0
 - t0
c
dfplayer
where
list
import timeit
np
timeit.timeit("np",number=1)
timeit.timeit(stmt="np",setup = "import np ",number=1)
timeit.timeit(stmt="np",setup = "import numpy as np ",number=1)
timeit.timeit(stmt="np",setup = "import numpy as np ",number=1000)
timeit.timeit(stmt="np.array([])",setup = "import numpy as np ",number=1000)
timeit.timeit(stmt="np.array([1,2,3])",setup = "import numpy as np ",number=1000)
_test()
import cProfile
cProfile.run('_test()')
import pstats
cProfile.run('_test()')
cProfile.run('2+2')
c
player
player[0]
player[3]
player[4]
player[1].Z
dfplayer.columns
dfplayer.columns.get_loc('X')
dfplayer.columns.get_loc('Stead_ID')
dfplayer.columns.get_loc('Steam_ID')
player[4]
player[0]
player[1]
player
dfplayer.columns.get_loc('index')
dfplayer.columns.get_loc('Steam_ID')
dfplayer.columns.get_loc('X')
dfplayer.columns.get_loc('X')+ 1
dfplayer.iloc[2]
player
player[8]
player[7]
dfplayer.columns.get_loc('X') + 1
dfplayer.columns.map
dfplayer.columns.map(lambda x: f[x] = x.index)
dfplayer.columns.map(lambda x: f[x])
dfplayer.columns.map(lambda x: x )
dfplayer.columns.map(lambda x: int(x) )
dfplayer.columns.map(lambda x: x+"2" )
for i, x in  enumerate(dfplayer.columns): x
for i, x in  enumerate(dfplayer.columns): i
{(x,i) :for i, x in  enumerate(dfplayer.columns)}
{x: i for i, x in  enumerate(dfplayer.columns)}
c
[ player[p_get_i["X"]]  ,  player[p_get_i["Y"]],    player[p_get_i["Z"]]]
c
dfplayer
dfplayer.ViewX
dfplayer.ViewXDiff
dfplayer.rounds
dfplayer.Round
dfplayer.Round == 0
dfplayer[dfplayer.Round == 0]
dfplayer[dfplayer.Round != dfplayer.Round.shift(1)]]
dfplayer[dfplayer.Round != dfplayer.Round.shift(1)]
dfplayer.shift(1)[dfplayer.Round != dfplayer.Round.shift(1)]
dfplayer[37909]
dfplayer[(37909-2): 37909 + 2]
dfplayer[37909]
dfplayer[(1123-2): 1123 + 2]
dfplayer.shift(1)[dfplayer.Round != dfplayer.Round.shift(1)]
dfplayer[dfplayer.Round != dfplayer.Round.shift(1)]
dfplayer.shift(1)[dfplayer.Round != dfplayer.Round.shift(1)]
dfplayer[dfplayer.Round != dfplayer.Round.shift(1)]
dfplayer.shift(1)[dfplayer.Round != dfplayer.Round.shift(1)]
dfplayer[dfplayer.Round != dfplayer.Round.shift(1)]
dfplayer.shift(1)[dfplayer.Round != dfplayer.Round.shift(1)]
where
list
dfplayer
dfplayer[dfplayer.Round != dfplayer.Round.shift(1)]
dfplayer[dfplayer.ViewDiff > 100]
dfplayer[dfplayer.ViewDiff > 50]
dfplayer[dfplayer.ViewXDiff > 50]
dfplayer[dfplayer.ViewXDiff > 10]
dfplayer[dfplayer
dfplayer.ViewDiff
dfplayer
dfplayer[0]
dfplayer[[0]]
dfplayer.iloc[0]
dfplayer[dfplayer.XAimbot > 100]
dfplayer[dfplayer.XAimbot < 100]
c
df
c df[(df.HasShot == True)][['Tick','Name','Steam_ID', 'Weapon']]
df
 df[(df.HasShot == True)][['Tick','Name','Steam_ID', 'Weapon']]
c
sys.argv[1]
df[['Tick','Name','Steam_ID', 'Weapon']]
df[(df.HasShot == True)]
df[(df.HasShot == True)][['HashShot']]
df[(df.HasShot == True)][['Tick']]
df[(df.HasShot == True)][['Tick','Name','Steam_ID', 'Weapon']]
c
(dfplayer.XAimbot)**2 + (dfplayer.YAimbot**2)
dfplayer['Test'] = (dfplayer.XAimbot)**2 + (dfplayer.YAimbot**2)
dfplayer
((dfplayer.XAimbot)**2 + (dfplayer.YAimbot**2)).apply(np.sqrt())
((dfplayer.XAimbot)**2 + (dfplayer.YAimbot**2)).apply(np.sqrt)
dfrounds
dictrounds
dictrounds[6]
dictrounds[7]
dictrounds[8]
dictrounds[9]
dictrounds[10]
S
S.type
S.type()
S.dim
S.ndim
np.empty([2])
np.empty(2)
np.empty(shape=2)
np.array()
np.array([])
np.array([[],[]])
X = np.array([[],[]])
S
X.concatenate
np.concatenate
np.concatenate(X,S)
np.concatenate(X,len(S))
len(X)
np.concatenate(S,S)
np.vstack(S,S)
np.vstack([S,S])
len(np.vstack([S,S]))
len(S)
len(S) * 2
len(np.vstack([S,X]))
X
S
X.dim
X.dtype
X.ntype
X.ndim
np.array([dictrounds[key].values
dictrounds[key].values
S.type
S
S.dtype
S.ndim
X.dty[e
X.dtype
X.ndim
X
np.concatenate(S,X)
np.vstack(S,X)
np.vstack([S,X])
X.shape
S.shape
np.reshape(X,(0,2))
= np.reshape([],(0,2))
= np.reshape(np.array(),(0,2))
= np.reshape(np.array([]),(0,2))
= np.reshape(np.array([0]),(0,2))
= np.reshape(X),(0,2))
= np.reshape(np.array([0]),(0,2))
= np.reshape(np.array(),(0,2))
np.reshape(X,(0,2))
X = np.array([[],[]])
np.reshape(np.array([[],[]]),(0,2))
np.reshape(np.array([]),(0,2))
df
dictrounds[6]
dictrounds[6].size
len(dictrounds[6])
where
lengths
lengths.sum()
sum(lengths)
X
len(X)
c
where
list
X 
X.sum()
up
up 
up
X
X.sum()
X[0]
X[0].sum()
_df
_df.dropna()
_df
np.isfinite
np.isfinite(dfplayer)
dfplayer
dfplayer.dropna()
dfplayer.isnull()
dfplayer[dfplayer.isnull()]
dfplayer[dfplayer.isnull().any(axis=1)]]
dfplayer[dfplayer.isnull().any(axis=1)]
dfplayer[0:10]
dfplayer[dfplayer.AimbotDist.isnull().any(axis=1)]
dfplayer[dfplayer.AimbotDist.isnull()]
dfplayer[dfplayer.ViewDiff]]
dfplayer[dfplayer.ViewDiff.isnull()]
dfplayer[(dfplayer.ViewDiff.isnull()) || (dfplayer.AimbotDist.isnull())]
dfplayer[(dfplayer.ViewDiff.isnull()) | (dfplayer.AimbotDist.isnull())]
dfplayer[(dfplayer.ViewDiff.isnull()) | (dfplayer.AimbotDist > 0]
dfplayer[(dfplayer.ViewDiff.isnull()) | (dfplayer.AimbotDist > 0)]
dfplayer[(dfplayer.ViewDiff.notnull()) & (dfplayer.AimbotDist.notnull())]
dfplayer[(dfplayer.ViewDiff.isnull()) | (dfplayer.AimbotDist > 0)]
dfplayer[(dfplayer.ViewDiff.notnull()) & (dfplayer.AimbotDist.notnull())]
model.predict()
model.predict(X)
_result = model.predict(X)
len(_result)
dfplayer
_result
_result.sum()
_result
len(_result)
X
len(X)
dfplayer.Ticks
dfplayer.Tick
len(dfplayer.Tick)
where
model 
model.fit(X,lengths)
model.predict(X)
model.fit(X,lengths)
model.predict(X)
model.result()
model.predict()
model.predict(X)
_predict = model.predict(X)
_predict[0:10
_predict[0:10]
_predict[0:20]
_predict[0:30]
_predict[0:100]
len(_predict[0:100])
dfplayer[:100]
dfplayer[['AimbotDist', 'ViewDiff'][:100]
dfplayer[['AimbotDist', 'ViewDiff']][:100]
dfplayer[['Tick','AimbotDist', 'ViewDiff']][:100]
len(dfplayer)
_result
len(_predict)
dfplayer['HMM'] = _predict
dfplayer
dfplayer['Tick','AimbotDiff', 'ViewDiff','HMM']
dfplayer[['Tick','AimbotDiff', 'ViewDiff','HMM']]
where
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][0:60]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.HMM == 0]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.HMM == 1]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.HMM == 0]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.HMM == 1]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.HMM == 1][0:100]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.HMM == 1][0:60]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.HMM == 1]
where
lsit
where
_result
dfplayer['HMM'] = _result
dfplayer['HMM']
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.HMM == 1]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.HMM == 0]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.Tick >= 24885]
dfplayer[['Tick','AimbotDist', 'ViewDiff','HMM']][dfplayer.Tick >= 24985]
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][dfplayer.Tick >= 24985]
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][dfplayer.Round > 6]
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][dfplayer.Round > 6 & dfplayer.HMM == 0]
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Round > 6 ) & ( dfplayer.HMM == 0)]
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Round > 7 ) & ( dfplayer.HMM == 0)]
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Round > 6 ) & ( dfplayer.HMM == 0)]
dfplayer['HMM'] = _result
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Round > 6 ) & ( dfplayer.HMM == 0)]
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Round > 6 ) & ( dfplayer.HMM == 1
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Round > 6 ) & ( dfplayer.HMM == 1)]
_result
dfplayer['HMM'] = _result
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Round > 6 ) & ( dfplayer.HMM == 1)]
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Round > 6 ) & ( dfplayer.HMM == 0)]
dfplayer
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Tick > 11000)]
dfplayer
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.Tick > 11000)]
dfplayer[['Round','Tick','AimbotDist' ,'ViewDiff','HMM']][(dfplayer.HMM) == 1]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 1]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 0]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 1]
c
dfplayer 
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 1]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 2]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 1]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 0]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 1]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 2]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.HMM) == 1]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12100]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12100)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12000)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12000) && dfplayer.HMM == 1]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12000) &(dfplayer.HMM == 1)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 11000) &(dfplayer.HMM == 1)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 14000)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 14050)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 14000)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 14050)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12000) &(dfplayer.HMM == 1)]
len(dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12000) &(dfplayer.HMM == 1)])
len(dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12000) &(dfplayer.HMM == 0)])
len(dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12000) &(dfplayer.HMM == 4)])
len(dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12000) &(dfplayer.HMM == 1)])
len(dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 12000) &(dfplayer.HMM == 0)])
len(dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 10000) &(dfplayer.HMM == 0)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 14000) &(dfplayer.HMM == 1)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 14000) &(dfplayer.HMM == 2)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 14000) &(dfplayer.HMM == 1)]
help(hmmlearn)
hmm
where
list(0,10)
where
list
help(hmmlearn)
import hmmlearn
help(hmmlearn)
help(hmmlearn.hmm)
help(GuassianHMM)
help(GaussianHMM)
model
model.predict_proba(X)
len(model.predict_proba(X))
len(model.predict(X))
result
_result
dfplayer['HMM']
len(dfplayer['HMM'])
len(model.predict(X))
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 14000) &(dfplayer.HMM == 2)]
dfplayer[['Round','Tick','ViewDiff','HMM']][(dfplayer.Tick > 14000) &(dfplayer.HMM == 1)]
model.decode
model.decode(X)
len(model.decode(X))
len(model.decode(X))
model.decode(X)[1]
len(model.decode(X)[1])
model.decode(X)[1][7015]
model.decode(X)[1][7014]
model.decode(X)[1][7016]
model.decode(X)[1]
model.decode(X)[1].sum()
model.decode(X)
model.decode(X[0:10])
model.decode(X[20:40])
model.decode(X[100:50])
model.decode(X[100:150])
model.predict(X[100:15])
X
model.predict(X[100:150])
len(model.predict(X[100:150]))
len(model.predict(X[500:600]))
X[500:600]
dfplayer['
math
math.atan
math.atan(1,1)
math.atan2(1,1)
help(math.atan2)
math.atan2(0,1)
math.atan2(1,1)
math.atan2(2,1)
math.atan2(2,0)
math.atan2(1,0)
math.degrees(math.atan2(1,0))
math.degrees(math.atan2(0,1))
math.sin(math.atan2(1,0))
math.sin(math.atan2(1,1))
math.sin(math.atan2(1,2))
math.sin(math.atan2(1,3))
math.sin(math.atan2(1,-3))
math.sin(math.atan2(1,3))
math.sin(math.atan2(1,-3))
math.cos(math.atan2(1,-3))
math.cos(math.atan2(1,3))
math.sin(math.atan2(1,1))
math.sin(math.atan2(11))
dfplayer.apply(lambda row: math.atan2(row.TrueViewY , row.TrueViewX ))
dfplayer.apply(lambda row: math.atan2(row['TrueViewY'] , row['TrueViewX'] ))
where
list
list(125,128)
dfplayer.apply(lambda row: math.atan2(row['TrueViewYDiff'] , row['TrueViewXDiff'] ))
dfplayer
dfplayer['TrueViewYDiff']
dfplayer.apply(lambda row: math.atan2(row['TrueViewYDiff'] , row['TrueViewXDiff'] ))
dfplayer.apply(lambda row: math.atan2(row['TrueViewYDiff'] , row['TrueViewXDiff'] ), axis=1)
dfplayer['TrueViewRad'] = dfplayer.apply(lambda row: math.atan2(row['TrueViewYDiff'] , row['TrueViewXDiff'] ), axis=1)
sin(dfplayer.TrueViewRad)
math.sin(dfplayer.TrueViewRad)
dfplayer.TrueViewRad
dfplayer.TrueViewRad > 0
dfplayer[["TrueViewXDiff", "TrueViewYDiff", "TrueViewRad"]][dfplayer.TrueViewRad > 0]
TrueViewY
df.TrueViewY
dfplayer.TrueViewY
dfplaer[dfplayer.TrueViewY > 100
dfplayer[["TrueViewXDiff", "TrueViewYDiff", "TrueViewRad"]][dfplayer.TrueViewRad > 0]
dfplayer.TrueViewY
dfplayer.TrueViewX
dfplayer[["TrueViewXDiff", "TrueViewYDiff", "TrueViewRad"]][dfplayer.TrueViewRad > 0]
math.sin(math.radians(0.351600))
math.atan2(0.3516, 0)
math.sin(math.atan2(0.3516, 0))
where
dfplayer
dfplayer[dfplayer.TrueViewSin > 0]
